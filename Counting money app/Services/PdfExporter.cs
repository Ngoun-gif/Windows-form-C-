using iTextSharp.text;
using iTextSharp.text.pdf;
using MoneyCounterApp.Models;
using MoneyCounterApp.Models.Interfaces;
using System;
using System.IO;

namespace MoneyCounterApp.Services
{
    public class PdfExporter : IReportExporter
    {
        public void Export(MoneyReport report, string filePath)
        {
            // Use fully qualified name for Document
            var document = new iTextSharp.text.Document();

            try
            {
                PdfWriter.GetInstance(document, new FileStream(filePath, FileMode.Create));
                document.Open();

                // Create fonts with fully qualified names
                var titleFont = iTextSharp.text.FontFactory.GetFont(iTextSharp.text.FontFactory.HELVETICA_BOLD, 16);
                var headerFont = iTextSharp.text.FontFactory.GetFont(iTextSharp.text.FontFactory.HELVETICA_BOLD, 12);
                var normalFont = iTextSharp.text.FontFactory.GetFont(iTextSharp.text.FontFactory.HELVETICA, 10);
                var smallFont = iTextSharp.text.FontFactory.GetFont(iTextSharp.text.FontFactory.HELVETICA_OBLIQUE, 8);

                // Add title
                document.Add(new iTextSharp.text.Paragraph("Money Count Report", titleFont)
                {
                    Alignment = iTextSharp.text.Element.ALIGN_CENTER,
                    SpacingAfter = 10
                });

                // Report info
                document.Add(new iTextSharp.text.Paragraph($"Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}", normalFont));
                document.Add(new iTextSharp.text.Paragraph($"Source: {report.Source} - {Path.GetFileName(report.FilePath)}", normalFont));
                document.Add(iTextSharp.text.Chunk.NEWLINE);

                // Transaction details
                document.Add(new iTextSharp.text.Paragraph("Transaction Details", headerFont)
                {
                    SpacingAfter = 5
                });

                AddKeyValue(document, "Machine ID", report.MachineId, normalFont);
                AddKeyValue(document, "Location", report.Location, normalFont);
                AddKeyValue(document, "Operator", report.Operator, normalFont);
                AddKeyValue(document, "Timestamp", report.Timestamp, normalFont);
                AddKeyValue(document, "Currency", report.Currency, normalFont);
                AddKeyValue(document, "Status", report.Status, normalFont);
                AddKeyValue(document, "Model", report.MachineModel, normalFont);
                document.Add(iTextSharp.text.Chunk.NEWLINE);

                // Summary
                document.Add(new iTextSharp.text.Paragraph("Summary", headerFont)
                {
                    SpacingAfter = 5
                });

                AddKeyValue(document, "Total Amount", $"{report.Currency} {report.TotalAmount}", normalFont);
                AddKeyValue(document, "Total Notes", report.TotalNotes.ToString(), normalFont);
                document.Add(iTextSharp.text.Chunk.NEWLINE);

                // Denomination table
                document.Add(new iTextSharp.text.Paragraph("Denomination Details", headerFont)
                {
                    SpacingAfter = 10
                });

                var table = new iTextSharp.text.pdf.PdfPTable(4)
                {
                    WidthPercentage = 100
                };
                table.SetWidths(new[] { 2f, 1f, 2f, 1f });  // Explicit float array

                // Table headers
                table.AddCell(new iTextSharp.text.Phrase("Denomination", headerFont));
                table.AddCell(new iTextSharp.text.Phrase("Count", headerFont));
                table.AddCell(new iTextSharp.text.Phrase("Amount", headerFont));
                table.AddCell(new iTextSharp.text.Phrase("Stacker", headerFont));

                // Table rows
                foreach (var note in report.Notes)
                {
                    table.AddCell(new iTextSharp.text.Phrase($"{report.Currency} {note.Denomination}", normalFont));
                    table.AddCell(new iTextSharp.text.Phrase(note.Count.ToString(), normalFont));
                    table.AddCell(new iTextSharp.text.Phrase($"{report.Currency} {note.Amount}", normalFont));
                    table.AddCell(new iTextSharp.text.Phrase(note.Stacker, normalFont));
                }

                document.Add(table);
                document.Add(iTextSharp.text.Chunk.NEWLINE);

                // Footer
                document.Add(new iTextSharp.text.Paragraph("Generated by Money Counter Converter Pro", smallFont)
                {
                    Alignment = iTextSharp.text.Element.ALIGN_CENTER
                });
            }
            finally
            {
                document.Close();
            }
        }

        private void AddKeyValue(iTextSharp.text.Document document, string key, string value, iTextSharp.text.Font font)
        {
            if (value != "N/A")
            {
                var paragraph = new iTextSharp.text.Paragraph
                {
                    Font = font
                };
                paragraph.Add(new iTextSharp.text.Chunk($"{key}: ", font));
                paragraph.Add(new iTextSharp.text.Chunk(value, font));
                document.Add(paragraph);
            }
        }
    }
}